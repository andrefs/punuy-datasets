diff --git a/node_modules/ajv-cli/src/commands/ajv.ts b/node_modules/ajv-cli/src/commands/ajv.ts
index d06acb5..3156374 100644
--- a/node_modules/ajv-cli/src/commands/ajv.ts
+++ b/node_modules/ajv-cli/src/commands/ajv.ts
@@ -1,12 +1,12 @@
 import type AjvCore from "ajv/dist/core"
-import type {ParsedArgs} from "minimist"
-import type {SchemaSpec} from "./types"
-import Ajv7, {Plugin} from "ajv"
+import type { ParsedArgs } from "minimist"
+import type { SchemaSpec } from "./types"
+import Ajv7, { Plugin } from "ajv"
 import Ajv2019 from "ajv/dist/2019"
 import Ajv2020 from "ajv/dist/2020"
 import AjvJTD from "ajv/dist/jtd"
-import {Service} from "ts-node"
-import {getOptions} from "./options"
+import { Service } from "ts-node"
+import { getOptions } from "./options"
 import * as util from "./util"
 import * as path from "path"
 import * as draft6metaSchema from "ajv/lib/refs/json-schema-draft-06.json"
@@ -15,20 +15,20 @@ type AjvMethod = "addSchema" | "addMetaSchema"
 
 // copied from https://github.com/babel/babel/blob/d8da63c929f2d28c401571e2a43166678c555bc4/packages/babel-helpers/src/helpers.js#L602-L606
 /* istanbul ignore next */
-const interopRequireDefault = (obj: any): {default: any} =>
-  obj && obj.__esModule ? obj : {default: obj}
+const interopRequireDefault = (obj: any): { default: any } =>
+  obj && obj.__esModule ? obj : { default: obj }
 
 const importDefault = <T = unknown>(moduleName: string): T =>
   interopRequireDefault(require(moduleName)).default
 
-const AjvClass: {[S in SchemaSpec]?: typeof AjvCore} = {
+const AjvClass: { [S in SchemaSpec]?: typeof AjvCore } = {
   jtd: AjvJTD,
   draft7: Ajv7,
   draft2019: Ajv2019,
   draft2020: Ajv2020,
 }
 
-export default function (argv: ParsedArgs): AjvCore {
+export default function(argv: ParsedArgs): AjvCore {
   const opts = getOptions(argv)
   if (argv.o) opts.code.source = true
   const Ajv: typeof AjvCore = AjvClass[argv.spec as SchemaSpec] || Ajv7
@@ -86,9 +86,11 @@ export default function (argv: ParsedArgs): AjvCore {
       registerer = require("ts-node").register()
     } catch (err) {
       /* istanbul ignore next */
-      if (err.code === "MODULE_NOT_FOUND") {
+      // if (err.code === "MODULE_NOT_FOUND") {
+      if ((err as { code?: string; message: string }).code === "MODULE_NOT_FOUND") {
         throw new Error(
-          `'ts-node' is required for the TypeScript configuration files. Make sure it is installed\nError: ${err.message}`
+          //`'ts-node' is required for the TypeScript configuration files. Make sure it is installed\nError: ${err.message}`
+          `'ts-node' is required for the TypeScript configuration files. Make sure it is installed\nError: ${(err as Error).message}`
         )
       }
 
diff --git a/node_modules/ajv-cli/src/commands/util.ts b/node_modules/ajv-cli/src/commands/util.ts
index 0c3b5d7..744b431 100644
--- a/node_modules/ajv-cli/src/commands/util.ts
+++ b/node_modules/ajv-cli/src/commands/util.ts
@@ -4,7 +4,7 @@ import * as path from "path"
 import * as fs from "fs"
 import * as yaml from "js-yaml"
 import * as JSON5 from "json5"
-import {AnyValidateFunction} from "ajv/dist/core"
+import { AnyValidateFunction } from "ajv/dist/core"
 
 export function getFiles(args: string | string[]): string[] {
   let files: string[] = []
@@ -14,7 +14,7 @@ export function getFiles(args: string | string[]): string[] {
 
   function _getFiles(fileOrPattern: string): void {
     if (glob.hasMagic(fileOrPattern)) {
-      const dataFiles = glob.sync(fileOrPattern, {cwd: process.cwd()})
+      const dataFiles = glob.sync(fileOrPattern, { cwd: process.cwd() })
       files = files.concat(dataFiles)
     } else {
       files.push(fileOrPattern)
@@ -52,7 +52,8 @@ export function openFile(filename: string, suffix: string): any {
       json = require(file)
     }
   } catch (err) {
-    const msg: string = err.message
+    //const msg: string = err.message
+    const msg: string = (err as Error).message
     console.error(`error:  ${msg.replace(" module", " " + suffix)}`)
     process.exit(2)
   }
@@ -82,7 +83,8 @@ export function compile(ajv: Ajv, schemaFile: string): AnyValidateFunction {
     return ajv.compile(schema)
   } catch (err) {
     console.error(`schema ${schemaFile} is invalid`)
-    console.error(`error: ${err.message}`)
+    // console.error(`error: ${err.message}`)
+    console.error(`error: ${(err as Error).message}`)
     process.exit(1)
   }
 }
